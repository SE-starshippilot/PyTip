linalg.multi_dot()
Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order.
numpy.vdot()
Return the dot product of two vectors.
numpy.inner()
Inner product of two arrays.
numpy.outer()
Compute the outer product of two vectors.
numpy.matmul()
Matrix product of two arrays.
numpy.tensordot()
Compute tensor dot product along specified axes.
numpy.einsum()
Evaluates the Einstein summation convention on the operands.
numpy.einsum_path()
Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays.
linalg.matrix_power()
Raise a square matrix to the (integer) power n.
numpy.kron()
Kronecker product of two arrays.
linalg.cholesky()
Cholesky decomposition.
linalg.qr()
Compute the qr factorization of a matrix.
linalg.svd()
Singular Value Decomposition.
linalg.eig()
Compute the eigenvalues and right eigenvectors of a square array.
linalg.eigh()
Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix.
linalg.eigvals()
Compute the eigenvalues of a general matrix
linalg.eigvalsh()
Compute the eigenvalues of a complex Hermitian or real symmetric matrix.
linalg.norm()
Matrix or vector norm.
linalg.cond()
Compute the condition number of a matrix.
linalg.det()
Compute the determinant of an array.
linalg.matrix_rank()
Return matrix rank of array using SVD method
numpy.trace()
Return the sum along diagonals of the array. 
linalg.slogdet()
Compute the sign and (natural) logarithm of the determinant of an array.
linalg.solve(a, b)
Solve a linear matrix equation, or system of linear scalar equations.
linalg.tensorsolve(a, b, axes=None)
Solve the tensor equation a x = b for x.
linalg.lstsq(a, b, rcond='warn')
Return the least-squares solution to a linear matrix equation.
linalg.inv(a)
Compute the (multiplicative) inverse of a matrix.
linalg.pinv(a, rcond=1e-15, hermitian=False)
Compute the (Moore-Penrose) pseudo-inverse of a matrix.
linalg.tensorinv(a, ind=2)
Compute the ‘inverse’ of an N-dimensional array.
numpy.all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>)
Test whether all array elements along a given axis evaluate to True.
numpy.any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>)
Test whether any array element along a given axis evaluates to True.
numpy.isfinite()
Test element-wise for finiteness (not infinity and not Not a Number)
numpy.isinf()
Test element-wise for positive or negative infinity.
numpy.isnan()
Test element-wise for NaN and return result as a boolean array.
numpy.isnat()
Test element-wise for NaT (not a time) and return result as a boolean array.
numpy.isneginf(x, out=None)
Test element-wise for negative infinity, return result as bool array.
numpy.isposinf(x, out=None)
Test element-wise for positive infinity, return result as bool array.
numpy.iscomplex(x)
Returns a bool array, where True if input element is complex.
numpy.iscomplexobj(x)
Check for a complex type or an array of complex numbers. 
numpy.isfortran(a)
Check if the array is Fortran contiguous but not C contiguous
numpy.isreal()
Returns a bool array, where True if input element is real
numpy.isrealobj()
Return True if x is a not complex type or an array of complex numbers.
numpy.isscalar(element)
Returns True if the type of element is a scalar type.
numpy.logical_and()
Compute the truth value of x1 AND x2 element-wise.
numpy.logical_or()
Compute the truth value of x1 OR x2 element-wise.
numpy.logical_not()
Compute the truth value of NOT x element-wise.
numpy.logical_xor()
Compute the truth value of x1 XOR x2, element-wise.
numpy.allclose()
Returns True if two arrays are element-wise equal within a tolerance.
numpy.isclose()
Returns a boolean array where two arrays are element-wise equal within a tolerance.
numpy.array_equal()
True if two arrays have the same shape and elements, False otherwise. 
numpy.array_equiv(a1, a2)
Returns True if input arrays are shape consistent and all elements equal. 
numpy.greater()
Return the truth value of (x1 > x2) element-wise. 
numpy.greater_equal()
Return the truth value of (x1 >= x2) element-wise. 
numpy.less()
Return the truth value of (x1 < x2) element-wise.
numpy.less_equal()
Return the truth value of (x1 <= x2) element-wise
numpy.equal()
Return (x1 == x2) element-wise.
numpy.not_equal()
Return (x1 != x2) element-wise.
numpy.sin()
Trigonometric sine, element-wise.
numpy.cos()
Cosine element-wise.
numpy.tan()
Compute tangent element-wise.
numpy.arcsin()
Inverse sine, element-wise.
numpy.arccos() 
Trigonometric inverse cosine, element-wise.
numpy.arctan() 
Trigonometric inverse tangent, element-wise.
numpy.hypot() 
Given the “legs” of a right triangle, return its hypotenuse.
numpy.arctan2() 
Element-wise arc tangent of x1/x2 choosing the quadrant correctly.
numpy.degrees() 
Convert angles from radians to degrees.
numpy.radians() 
Convert angles from degrees to radians.
numpy.unwrap() 
Unwrap by taking the complement of large deltas with respect to the period.
numpy.deg2rad()
Convert angles from degrees to radians.
numpy.rad2deg()
Convert angles from radians to degrees.
numpy.sinh() 
Hyperbolic sine, element-wise.
numpy.cosh() 
Hyperbolic cosine, element-wise.
numpy.tanh() 
Compute hyperbolic tangent element-wise.
numpy.arcsinh() 
Hyperbolic sine, element-wise.
numpy.arccosh() 
Hyperbolic cosine, element-wise.
numpy.arctanh()
Compute hyperbolic tangent element-wise.
numpy.arcsinh()
Inverse hyperbolic sine element-wise.
numpy.arccosh()
Inverse hyperbolic cosine, element-wise.
numpy.arctanh()
Inverse hyperbolic tangent element-wise.
numpy.round()
Evenly round to the given number of decimals.
numpy.around()
Round an array to the given number of decimals.
numpy.rint()
Round elements of the array to the nearest integer
numpy.fix()
Round to nearest integer towards zero.
numpy.floor()
Return the floor of the input, element-wise.
numpy.ceil()
Return the ceiling of the input, element-wise.
numpy.trunc()
Return the truncated value of the input, element-wise.
numpy.prod()
Return the product of array elements over a given axis.
numpy.sum()
Sum of array elements over a given axis.
numpy.nanprod()
Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones.
numpy.nansum()
Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.
numpy.cumprod()
Return the cumulative product of elements along a given axis.
numpy.cumsum()
Return the cumulative sum of the elements along a given axis.
numpy.nancumprod()
Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one. The cumulative product does not change when NaNs are encountered and leading NaNs are replaced by ones.
numpy.nancumsum()
Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero. The cumulative sum does not change when NaNs are encountered and leading NaNs are replaced by zeros.
numpy.diff()
Calculate the n-th discrete difference along the given axis.
numpy.ediff1d()
The differences between consecutive elements of an array.
numpy.gradient()
Return the gradient of an N-dimensional array.
numpy.cross()
Return the cross product of two (arrays of) vectors.
numpy.trapz()
Integrate along the given axis using the composite trapezoidal rule.
numpy.exp()
Calculate the exponential of all elements in the input array.
numpy.expm1()
Calculate exp(x) - 1 for all elements in the array.
numpy.exp2()
Calculate 2**p for all p in the input array.
numpy.log()
Natural logarithm, element-wise.
numpy.log10()
Return the base 10 logarithm of the input array, element-wise.
numpy.log2()
Return the base 2 logarithm of the input array, element-wise.
numpy.log1p()
Return the natural logarithm of one plus the input array, element-wise. 
numpy.logaddexp()
Logarithm of the sum of exponentiations of the inputs.
numpy.logaddexp2()
Logarithm of the sum of exponentiations of the inputs in base-2.
numpy.i0()
Modified Bessel function of the first kind, order 0.
numpy.sinc()
Return the normalized sinc function.
numpy.signbit()
Returns element-wise True where signbit is set (less than zero).
numpy.copysign()
Change the sign of x1 to that of x2, element-wise.
numpy.frexp()
Decompose the elements of x into mantissa and twos exponent.
numpy.ldexp()
Returns x1 * 2**x2, element-wise.
numpy.nextafter()
Return the next floating-point value after x1 towards x2, element-wise.
numpy.spacing()
Return the distance between x and the nearest adjacent number.
numpy.lcm()
Returns the lowest common multiple of |x1| and |x2|
numpy.gcd()
Returns the greatest common divisor of |x1| and |x2|
numpy.add()
Add arguments element-wise
numpy.reciprocal()
Return the reciprocal of the argument, element-wise
numpy.positive()
Numerical positive, element-wise.
numpy.negative()
Numerical negative, element-wise
numpy.multiply()
Multiply arguments element-wise.
numpy.divide()
Divide arguments element-wise
numpy.power()
First array elements raised to powers from second array, element-wise.
numpy.subtract()
Subtract arguments, element-wise.
numpy.true_divide()
Divide arguments element-wise.
numpy.floor_divide()
Return the largest integer smaller or equal to the division of the inputs. It is equivalent to the Python // operator and pairs with the Python % (remainder), function so that a = a % b + b * (a // b) up to roundoff.
numpy.float_power()
First array elements raised to powers from second array, element-wise.
numpy.fmod()
Returns the element-wise remainder of division.
numpy.mod()
Returns the element-wise remainder of division.
numpy.modf()
Return the fractional and integral parts of an array, element-wise.
numpy.remainder()
Returns the element-wise remainder of division.
numpy.divmod()
Return element-wise quotient and remainder simultaneously.
numpy.angle()
Return the angle of the complex argument.
numpy.real()
Return the real part of the complex argument.
numpy.imag()
Return the imaginary part of the complex argument.
numpy.conj()
Return the complex conjugate, element-wise.
numpy.conjugate()
Return the complex conjugate, element-wise.
numpy.maximum()
Element-wise maximum of array elements.
numpy.max()
Return the maximum of an array or maximum along an axis.
numpy.amax()
Return the maximum of an array or maximum along an axis.
numpy.fmax()
Element-wise maximum of array elements.
numpy.nanmax()
Return the maximum of an array or maximum along an axis, ignoring any NaNs. When all-NaN slices are encountered a RuntimeWarning is raised and NaN is returned for that slice.
numpy.minimum()
Element-wise minimum of array elements.
numpy.min()
Return the minimum of an array or minimum along an axis.
numpy.amin()
Return the minimum of an array or minimum along an axis.
numpy.fmin()
Element-wise minimum of array elements.
numpy.nanmin()
Return minimum of an array or minimum along an axis, ignoring any NaNs. When all-NaN slices are encountered a RuntimeWarning is raised and Nan is returned for that slice.
numpy.convolve()
Returns the discrete, linear convolution of two one-dimensional sequences.
numpy.clip()
Clip (limit) the values in an array.
numpy.sqrt()
Return the non-negative square-root of an array, element-wise.
numpy.cbrt()
Return the cube-root of an array, element-wise.
numpy.square()
Return the element-wise square of the input.
numpy.absolute()
Calculate the absolute value element-wise.
numpy.fabs()
Compute the absolute values element-wise.
numpy.sign()
Returns an element-wise indication of the sign of a number.
numpy.heaviside()
Compute the Heaviside step function.
numpy.nan_to_num()
Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the nan, posinf and/or neginf keywords.
numpy.real_if_close()
If input is complex with all imaginary parts close to zero, return real parts.
numpy.interp()
One-dimensional linear interpolation for monotonically increasing sample points.
